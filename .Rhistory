toJSON("{x:42,y:41}",pretty)
toJSON("{x:42,y:41}",pretty=TRUE)
toJSON("{x:42,y:41}",pretty=FALSE)
prettify(toJSON("{x:42,y:41}"))
editR("Draft Final Paper.Rmd")
library(editR)
editR("Draft Final Paper.Rmd")
prettify(toJSON("{x:42,y:41}"))
prettify(toJSON("{x:42,y:41}"))
minify(toJSON("{x:42,y:41}"))
toJSON("{x:42,y:41}")
toJSON("{x:42,y:41}", pretty=TRUE)
toJSON("{x:42,y:41},{a:32}", pretty=TRUE)
toJSON("[{x:42,y:41}],[{a:32}]", pretty=TRUE)
editR("Draft Final Paper.Rmd")
toJSON("[{x:42,y:41}],[{a:32}]", pretty=TRUE)
toJSON("[{x:42,y:41}],[{a:32}]", prettify=TRUE)
toJSON("[{x:42,y:41}],[{a:32}]", minify=TRUE)
toJSON("[{x:42,y:41}],[{a:32}]", minify=TRUE, flatten)
editR("Draft Final Paper.Rmd")
editR("Draft Final Paper.Rmd")
library(doParallel)
library(gbm)
library(randomForest)
library(tree)
library(ggplot2)
library(gridExtra)
library(data.table)
library(Hmisc)
library(caret)
library(plyr)
library(ddplyr)
library(tree)
cl <- makeCluster(detectCores() - 2)   # create a compute cluster using all CPU cores but 2
clusterEvalQ(cl, library(foreach))
registerDoParallel(cl)   # register this cluster
raw<-fread.csv("./Data/2015-12-05.csv")
library(doParallel)
library(gbm)
library(randomForest)
library(tree)
library(ggplot2)
library(gridExtra)
library(data.table)
library(Hmisc)
library(caret)
library(plyr)
library(dplyr)
library(tree)
cl <- makeCluster(detectCores() - 2)   # create a compute cluster using all CPU cores but 2
clusterEvalQ(cl, library(foreach))
registerDoParallel(cl)   # register this cluster
raw<-fread.csv("./Data/2015-12-05.csv")
?fread
raw<-fread("./Data/2015-12-05.csv")
raw<-read.csv('2015-11-22.csv',header=TRUE)
raw<-fread("./Data/2015-12-05.csv",header=TRUE)
raw<-read("./Data/2015-12-05.csv")
raw<-read.csv("./Data/2015-12-05.csv")
View(raw[is.na(raw$price),])
raw$nlength = sapply(strsplit(as.character(raw$measurement)," x "),"[",1)
raw$nwidth = sapply(strsplit(as.character(raw$measurement)," x "),"[",2)
raw$nheight = sapply(strsplit(as.character(raw$measurement)," x "),"[",3)
keeplist<-c()
raw_clean<-raw[,!names(raw) %in% c("suggestions","id")]
train_proportion <- .8
train_indices <- createDataPartition(
y=raw$price,
p=train_proportion,
list=FALSE)
train <- raw[train_indices, ]
test <- raw[-train_indices, ]
valid_proportion_of_train <- 0.2
valid_indices <- createDataPartition(
y=raw$price,
p=valid_proportion_of_train,
list=FALSE)
val <- train[valid_indices, ]
train <- train[-valid_indices, ]
summary(train$price)
summary(val$price)
summary(test$price)
View(val[is.na(val$price),])
View(raw[is.na(raw$price),])
raw_clean<-as.data.table(raw[,!names(raw) %in% c("suggestions","id")])
train_proportion <- .8
train_indices <- createDataPartition(
y=raw_clean$price,
p=train_proportion,
list=FALSE)
train <- raw_clean[train_indices, ]
test <- raw_clean[-train_indices, ]
valid_proportion_of_train <- 0.2
valid_indices <- createDataPartition(
y=raw_clean$price,
p=valid_proportion_of_train,
list=FALSE)
val <- train[valid_indices, ]
train <- train[-valid_indices, ]
train_proportion <- .8
train_indices <- createDataPartition(
y=raw_clean$price,
p=train_proportion,
list=FALSE)
train <- raw_clean[train_indices, ]
test <- raw_clean[-train_indices, ]
valid_proportion_of_train <- 0.2
valid_indices <- createDataPartition(
y=raw_clean$price,
p=valid_proportion_of_train,
list=FALSE)
val <- train[valid_indices, ]
train <- train[-valid_indices, ]
train_proportion <- .8
train_indices <- createDataPartition(
y=raw_clean$price,
p=train_proportion,
list=FALSE)
train <- raw_clean[train_indices, ]
test <- raw_clean[-train_indices, ]
valid_proportion_of_train <- 0.2
valid_indices <- createDataPartition(
y=raw_clean$price,
p=valid_proportion_of_train,
list=FALSE)
val <- train[valid_indices, ]
train <- train[-valid_indices, ]
train_proportion <- .8
train_indices <- createDataPartition(
y=raw_clean$price,
p=train_proportion,
list=FALSE)
train <- raw_clean[train_indices, ]
test <- raw_clean[-train_indices, ]
valid_proportion_of_train <- 0.2
valid_indices <- createDataPartition(
y=train$price,
p=valid_proportion_of_train,
list=FALSE)
val <- train[valid_indices, ]
train <- train[-valid_indices, ]
summary(train$price)
summary(val$price)
summary(test$price)
?summary
summary(train$price)
summary(val$price)
summary(test$price,test$carat)
table(test$price)
histogram(test$price)
histogram(test$price,train$price)
?histogram
?knn
?train
xvars<-names(train) %!in% c('price')
xvars<-names(train) %in% c('price')
xvars
names(names)
names(train)
xvars<-names(train)  !%in% c('price')
xvars<-names(train) ! %in% c('price')
xvars<-names[names(train) %in% c('price'),]
xvars<-names[names(train) %in% c('price')]
xvars<-names[names(train) ! %in% c('price')]
xvars<-names[!names(train) %in% c('price')]
xvars<-names[!names(train) %in% c('price')]
xvars<-names(train)
xvars
xvars[! xvars %in% c('price')]
xvars[! xvars %in% c('price','nheight')]
print(xvars)
prettify(xvars)
print(xvars)
xvars
?train
model_knn<-train(x=train[,xvars,with=FALSE],y=train$price,preProcess=c('center','scale'),method='knn')
raw$nlength = as.double(sapply(strsplit(as.character(raw$measurement)," x "),"[",1))
raw$nheight = as.double(sapply(strsplit(as.character(raw$measurement)," x "),"[",3))
raw$nlength = as.double(sapply(strsplit(as.character(raw$measurement)," x "),"[",1))
raw$nwidth = as.double(sapply(strsplit(as.character(raw$measurement)," x "),"[",2))
raw$nheight = as.double(sapply(strsplit(as.character(raw$measurement)," x "),"[",3))
droplist<-c("title_s", "suggestions", "shipping_day", "id", "orderby_short", "title", "clarity_order", "measurements", "length", "valid", "receiveby_short", "_version_", "product_class_exact", "report_order", "price_exact", "active", "orderby", "color_order", "cut_order", "upc", "receiveby", "collection_order","be_price")
raw_clean<-as.data.table(raw[,!names(raw) %in% c("suggestions","id")])
raw_clean<-as.data.table(raw[,!names(raw) %in% droplist)
raw_clean<-as.data.table(raw[,!names(raw) %in% droplist))
raw_clean<-as.data.table(raw[,!names(raw) %in% droplist])
droplist<-c("title_s", "suggestions", "shipping_day", "id", "orderby_short", "title", "clarity_order", "measurements", "length", "valid", "receiveby_short", "_version_", "product_class_exact", "report_order", "price_exact", "active", "orderby", "color_order", "cut_order", "upc", "receiveby", "collection_order","be_price","shipping_supplier","supplier")
raw_clean<-as.data.table(raw[,!names(raw) %in% droplist])
train_proportion <- .8
train_indices <- createDataPartition(
y=raw_clean$price,
p=train_proportion,
list=FALSE)
train <- raw_clean[train_indices, ]
test <- raw_clean[-train_indices, ]
valid_proportion_of_train <- 0.2
valid_indices <- createDataPartition(
y=train$price,
p=valid_proportion_of_train,
list=FALSE)
val <- train[valid_indices, ]
train <- train[-valid_indices, ]
summary(train$price)
summary(val$price)
summary(test$price)
xvars<-names(train)
xvars[! xvars %in% c('price')]
model_knn<-train(
x=train[,xvars,with=FALSE],
y=train$price,
preProcess=c('center','scale'),
method='knn')
model_knn<-train(
x=train[,xvars,with=FALSE],
y=train$price,
method='knn')
cl <- makeCluster(detectCores() - 2)   # create a compute cluster using all CPU cores but 2
clusterEvalQ(cl, library(foreach))
registerDoParallel(cl)   # register this cluster
model_knn<-train(
x=train[,xvars,with=FALSE],
y=train$price,
method='knn',
tuneLength=10)
View(raw_clean)
raw$nlength = as.double(sapply(strsplit(as.character(raw$measurement)," x "),"[",1))
raw$nwidth = as.double(sapply(strsplit(as.character(raw$measurement)," x "),"[",2))
raw$nheight = as.double(sapply(strsplit(as.character(raw$measurement)," x "),"[",3))
droplist<-c("title_s", "suggestions", "shipping_day", "id", "orderby_short", "title", "clarity_order", "measurements", "length", "valid", "receiveby_short", "_version_", "product_class_exact", "report_order", "price_exact", "active", "orderby", "color_order", "cut_order", "upc", "receiveby", "collection_order","be_price","shipping_supplier","supplier","X_version_")
#Feel free to add some of these back in if you think they're potential factors for the models
raw_clean<-as.data.table(raw[,!names(raw) %in% droplist])
train_proportion <- .8
train_indices <- createDataPartition(
y=raw_clean$price,
p=train_proportion,
list=FALSE)
train <- raw_clean[train_indices, ]
test <- raw_clean[-train_indices, ]
valid_proportion_of_train <- 0.2
valid_indices <- createDataPartition(
y=train$price,
p=valid_proportion_of_train,
list=FALSE)
val <- train[valid_indices, ]
train <- train[-valid_indices, ]
xvars<-c('cut','carat','clarity','color')
model_knn<-train(
x=train[,xvars,with=FALSE],
y=train$price,
method='knn',
tuneLength=10)
knn_model <- kknn(price ~ xvars,
train=train, test=val[, .(lstat)],
k=12, kernel='rectangular')
library(kknn
)
train=train, test=val[, .(lstat)],
knn_model <- kknn(price ~ xvars,
train=train, test=val[, .(lstat)],
k=12, kernel='rectangular')
?kknn
knn_model <- kknn(price ~ cut+carat+clarity+color,
train=train, test=val[, .(lstat)],
k=12, kernel='rectangular')
knn_model <- kknn(price ~ cut+carat+clarity+color,
train=train, test=val[, .(cut)],
k=12, kernel='rectangular')
attach(train)
knn_model <- kknn(price ~ cut+carat+clarity+color,
train=train, test=val[, .(cut)],
k=12, kernel='rectangular')
length(carat)
length(cut)
knn_model <- kknn(price ~ cut+carat+clarity+color,
train=train,
k=12, kernel='rectangular')
model_knn<-train(
x=train[,xvars,with=FALSE],
y=train$price,
method='knn',
tuneLength=10)
rf_model <- train(x=train[,xvars,with=FALSE],y=train$price,
method='parRF',  # parallel Random Forest
ntree=B,         # number of trees in the Random Forest
nodesize=25,     # minimum node size set small enough to allow for complex trees,
# but not so small as to require too large B to eliminate high variance
importance=TRUE, # evaluate importance of predictors
keep.inbag=TRUE,
trControl=trainControl(
method='oob',  # Out-of-Bag RMSE estimation
allowParallel=TRUE),
tuneGrid=NULL)
rf_model <- train(x=train[,xvars,with=FALSE],y=train$price,
method='rf',  # parallel Random Forest
ntree=B,         # number of trees in the Random Forest
nodesize=25,     # minimum node size set small enough to allow for complex trees,
# but not so small as to require too large B to eliminate high variance
importance=TRUE, # evaluate importance of predictors
keep.inbag=TRUE,
trControl=trainControl(
method='oob',  # Out-of-Bag RMSE estimation
allowParallel=TRUE),
tuneGrid=NULL)
tuneGrid=NULL)
rf_model <- train(x=train[,xvars,with=FALSE],y=train$price,
method='rf',  # parallel Random Forest
ntree=B,         # number of trees in the Random Forest
nodesize=25,     # minimum node size set small enough to allow for complex trees,
# but not so small as to require too large B to eliminate high variance
importance=TRUE, # evaluate importance of predictors
keep.inbag=TRUE,
trControl=trainControl(
method='oob',  # Out-of-Bag RMSE estimation),
tuneGrid=NULL)
zcs
rf_model <- train(x=train[,xvars,with=FALSE],y=train$price,
method='rf',  # parallel Random Forest
ntree=B,         # number of trees in the Random Forest
nodesize=25,     # minimum node size set small enough to allow for complex trees,
# but not so small as to require too large B to eliminate high variance
importance=TRUE, # evaluate importance of predictors
keep.inbag=TRUE,
trControl=trainControl(
method='oob'  # Out-of-Bag RMSE estimation)
tuneGrid=NULL)
rf_model <- train(x=train[,xvars,with=FALSE],y=train$price,
method='rf',  # parallel Random Forest
ntree=B,         # number of trees in the Random Forest
nodesize=25,     # minimum node size set small enough to allow for complex trees,
# but not so small as to require too large B to eliminate high variance
importance=TRUE, # evaluate importance of predictors
keep.inbag=TRUE,
trControl=trainControl(
method='oob')
tuneGrid=NULL)
rf_model <- train(x=train[,xvars,with=FALSE],y=train$price,
method='rf',  # parallel Random Forest
ntree=B,         # number of trees in the Random Forest
nodesize=25,     # minimum node size set small enough to allow for complex trees,
# but not so small as to require too large B to eliminate high variance
importance=TRUE, # evaluate importance of predictors
keep.inbag=TRUE,
trControl=trainControl(method='oob'),
tuneGrid=NULL)
rf_model <- train(x=train[,xvars,with=FALSE],y=train$price,
method='rf',
ntree=B,
nodesize=25,
importance=TRUE,
keep.inbag=TRUE,
trControl=trainControl(method='oob'),
tuneGrid=NULL)
package_version(caret)
package_version('caret')
update.packages()
update.packages(caret)
update.packages('caret')
xvars
model_knn<-train(
x=train[,xvars,with=FALSE],
y=train$price,
method='knn',
tuneLength=10)
model_knn<-train(
x=train[,xvars,with=FALSE],
y=train$price,
method='knn',
tuneLength=10)
raw_clean$cut<-factor(raw_clean$cut,levels=c("Fair","Good","Very Good","Ideal","Super Ideal"))
raw_clean$clarity<-factor(raw_clean$clarity,levels=c('SI2','SI1','VS2','VS1','VVS2','VVS1','IF','FL'))
raw_clean$color<-factor(raw_clean$color,levels=rev(c('D','E','F','G','H','I','J')))
table(raw$symmetry)
raw0_clean$symmetry<-factor(raw_clean$symmetry,levels=c('Fair','Good','Very Good','Excellent'))
raw_clean$symmetry<-factor(raw_clean$symmetry,levels=c('Fair','Good','Very Good','Excellent'))
table(raw$symmetry)
table(raw_clean$symmetry)
raw_clean$symmetry[raw_clean$symmetry=="Fa",]="Fair"
raw_clean$symmetry[raw_clean$symmetry=="Fa",,with=FALSE]="Fair"
raw_clean[,symmetry=="Fa",symmetry:="Fair"]
class(raw_clean)
raw_clean[,raw_clean$symmetry=="Fa",raw_clean$symmetry:="Fair"]
raw_clean[symmetry=="Fa",symmetry:="Fair"]
table(raw_clean$symmetry)
table(raw_clean$symmetry,exclude=NULL)
raw_clean<-as.data.table(raw[,!names(raw) %in% droplist])
raw_clean$cut<-factor(raw_clean$cut,levels=c("Fair","Good","Very Good","Ideal","Super Ideal"))
raw_clean$clarity<-factor(raw_clean$clarity,levels=c('SI2','SI1','VS2','VS1','VVS2','VVS1','IF','FL'))
raw_clean$color<-factor(raw_clean$color,levels=rev(c('D','E','F','G','H','I','J')))
raw0[,c('table','depth')]<-apply(raw0[,c('table','depth')],2,function(x) as.double(gsub('\\$|,','',x)))
raw_clean[symmetry=="Fa",symmetry:="Fair"]
raw_clean[symmetry=="Fa",symmetry:="Fair"]
table(raw_clean$symmetry,exclude=NULL)
raw_clean$symmetry<-factor(raw_clean$symmetry,levels=c('Fair','Good','Very Good','Excellent'))
table(raw_clean$shape,exclude=NULL)
table(raw_clean$polish,exclude=NULL)
raw_clean$polish<-factor(raw_clean$polish,levels=c('Fair','Good','Very Good','Excellent'))
table(raw_clean$fluorescence,exclude=NULL)
rf_model <- train(x=train[,xvars,with=FALSE],y=train$price,
method='rf',
ntree=B,
nodesize=25,
importance=TRUE,
keep.inbag=TRUE,
trControl=trainControl(method='oob'),
tuneGrid=NULL)
rf_model <- train(x=train[,xvars,with=FALSE],y=train$price,
method='rf',
ntree=B,
nodesize=25,
importance=TRUE,
keep.inbag=TRUE,
trControl=trainControl(method='oob'),
tuneGrid=NULL)
rf_model <- train(x=train[,xvars,with=FALSE],y=train$price,
method='rf',
ntree=B,
nodesize=25,
importance=TRUE,
keep.inbag=TRUE,
trControl=trainControl(method='oob'),
tuneGrid=NULL)
rf_model <- train(x=train[,xvars,with=FALSE],y=train$price,
method='rf',
ntree=B,
nodesize=25,
importance=TRUE,
keep.inbag=TRUE,
trControl=trainControl(method='oob'),
tuneGrid=NULL)
rf_model <- train(x=train[,xvars,with=FALSE],y=train$price,
method='rf',
ntree=B,
nodesize=25,
importance=TRUE,
keep.inbag=TRUE,
trControl=trainControl(method='oob'),
tuneGrid=NULL)
rf_model <- train(x=train[,xvars,with=FALSE],y=train$price,
method='rf',
ntree=B,
nodesize=25,
importance=TRUE,
keep.inbag=TRUE,
trControl=trainControl(method='oob'),
tuneGrid=NULL)
rf_model <- train(x=train[,xvars,with=FALSE],y=train$price,
method='rf',
ntree=B,
nodesize=25,
importance=TRUE,
keep.inbag=TRUE,
trControl=trainControl(method='oob'),
tuneGrid=NULL)
rf_model <- train(x=train[,xvars,with=FALSE],y=train$price,
method='rf',
ntree=B,
nodesize=25,
importance=TRUE,
keep.inbag=TRUE,
trControl=trainControl(method='oob'),
tuneGrid=NULL)
rf_model <- train(x=train[,xvars,with=FALSE],y=train$price,
method='rf',
ntree=B,
nodesize=25,
importance=TRUE,
keep.inbag=TRUE,
trControl=trainControl(method='oob'),
tuneGrid=NULL)
rf_model <- train(x=train[,xvars,with=FALSE],y=train$price,
method='rf',
ntree=B,
nodesize=25,
importance=TRUE,
keep.inbag=TRUE,
trControl=trainControl(method='oob'),
tuneGrid=NULL)
rf_model <- train(x=train[,xvars,with=FALSE],y=train$price,
method='rf',
ntree=B,
nodesize=25,
importance=TRUE,
keep.inbag=TRUE,
trControl=trainControl(method='oob'),
tuneGrid=NULL)
rf_model <- train(x=train[,xvars,with=FALSE],y=train$price,
method='rf',
ntree=B,
nodesize=25,
importance=TRUE,
keep.inbag=TRUE,
trControl=trainControl(method='oob'),
tuneGrid=NULL)
rf_model <- train(x=train[,xvars,with=FALSE],y=train$price,
method='rf',
ntree=B,
nodesize=25,
importance=TRUE,
keep.inbag=TRUE,
trControl=trainControl(method='oob'),
tuneGrid=NULL)
rf_model <- train(x=train[,xvars,with=FALSE],y=train$price,
method='rf',
ntree=B,
nodesize=25)
rf_model <- train(x=train[,xvars,with=FALSE],y=train$price,
method='rf',
ntree=B,
nodesize=25)
table(raw_clean$fluorescence,exclude=NULL)
raw_clean$fluorescence<-factor(raw_clean$fluorescence,levels=c('None','Very Slight','Slight','Faint','Medium','Medium Blue','Strong','Very Strong'))
table(raw_clean$fluorescence,exclude=NULL)
